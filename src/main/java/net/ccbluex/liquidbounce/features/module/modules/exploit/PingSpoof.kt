/*
 * FDPClient Hacked Client
 * A free open source mixin-based injection hacked client for Minecraft using Minecraft Forge by LiquidBounce.
 * https://github.com/UnlegitMC/FDPClient/
 */
package net.ccbluex.liquidbounce.features.module.modules.exploit

import net.ccbluex.liquidbounce.event.EventTarget
import net.ccbluex.liquidbounce.event.PacketEvent
import net.ccbluex.liquidbounce.event.UpdateEvent
import net.ccbluex.liquidbounce.features.module.Module
import net.ccbluex.liquidbounce.features.module.ModuleCategory
import net.ccbluex.liquidbounce.features.module.ModuleInfo
import net.ccbluex.liquidbounce.utils.timer.TimeUtils
import net.ccbluex.liquidbounce.value.BoolValue
import net.ccbluex.liquidbounce.value.IntegerValue
import net.minecraft.network.Packet
import net.minecraft.network.play.client.*

@ModuleInfo(name = "PingSpoof", category = ModuleCategory.EXPLOIT)
class PingSpoof : Module() {
    private val maxDelayValue: IntegerValue = object : IntegerValue("MaxDelay", 1000, 0, 5000) {
        override fun onChanged(oldValue: Int, newValue: Int) {
            val minDelayValue = minDelayValue.get()
            if (minDelayValue > newValue) set(minDelayValue)
        }
    }.displayable { !cancelValue.get() } as IntegerValue
    private val minDelayValue: IntegerValue = object : IntegerValue("MinDelay", 500, 0, 5000) {
        override fun onChanged(oldValue: Int, newValue: Int) {
            val maxDelayValue = maxDelayValue.get()
            if (maxDelayValue < newValue) set(maxDelayValue)
        }
    }.displayable { !cancelValue.get() } as IntegerValue
    private val c00Value = BoolValue("C00", true)
    private val c0FValue = BoolValue("C0F", false)
    private val c0BValue = BoolValue("C0B", false)
    private val c13Value = BoolValue("C13", false)
    private val c16Value = BoolValue("C16", true)
    private val cancelValue = BoolValue("Cancel", false)
    private val packetsMap = mutableMapOf<Packet<*>, Long>()

    override fun onDisable() {
        packetsMap.clear()
    }

    @EventTarget
    fun onPacket(event: PacketEvent) {
        val packet = event.packet
        if (((packet is C00PacketKeepAlive && c00Value.get()) || (packet is C0FPacketConfirmTransaction && c0FValue.get()) ||
                    (packet is C0BPacketEntityAction && c0BValue.get()) || (packet is C13PacketPlayerAbilities && c13Value.get()) ||
                    (packet is C16PacketClientStatus && c16Value.get())) && !(mc.thePlayer.isDead || mc.thePlayer.health <= 0) && !packetsMap.containsKey(
                packet
            )
        ) {
            event.cancelEvent()
            if (!cancelValue.get()) {
                packetsMap[packet] =
                    System.currentTimeMillis() + TimeUtils.randomDelay(minDelayValue.get(), maxDelayValue.get())
            }
        }
    }

    @EventTarget
    fun onUpdate(event: UpdateEvent) {
        if (cancelValue.get()) {
            return
        }

        packetsMap.map { it }.forEach { (packet, time) ->
            if (time < System.currentTimeMillis()) {
                mc.netHandler.addToSendQueue(packet)
                packetsMap.remove(packet)
            }
        }
    }
}